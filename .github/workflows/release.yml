# ============================================================================
# SEMANTIC RELEASE WORKFLOW
# ============================================================================
# This workflow automatically creates releases based on conventional commits
# and generates changelogs.
#
# Triggers:
#   - Push to main branch (after PR merge)
#   - Manual workflow dispatch
# ============================================================================

name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  # ============================================================================
  # SEMANTIC RELEASE
  # ============================================================================
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release
        run: |
          npm install -g \
            semantic-release@^23 \
            @semantic-release/changelog@^6 \
            @semantic-release/git@^10 \
            @semantic-release/github@^10 \
            conventional-changelog-conventionalcommits@^7

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  # ============================================================================
  # POST-RELEASE TASKS
  # ============================================================================
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: release
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get-tag
        run: |
          tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "version=${tag#v}" >> $GITHUB_OUTPUT

      - name: Update Terraform Registry
        if: steps.get-tag.outputs.tag != 'v0.0.0'
        run: |
          echo "📦 New version released: ${{ steps.get-tag.outputs.tag }}"
          echo "Terraform Registry will auto-detect the new tag"

      - name: Create release summary
        run: |
          echo "## 🎉 Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.get-tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Release created on GitHub" >> $GITHUB_STEP_SUMMARY
          echo "2. ✅ Changelog updated" >> $GITHUB_STEP_SUMMARY
          echo "3. 📦 Terraform Registry will auto-sync" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`hcl" >> $GITHUB_STEP_SUMMARY
          echo "module \"dns\" {" >> $GITHUB_STEP_SUMMARY
          echo "  source  = \"your-org/dns-terraform-module\"" >> $GITHUB_STEP_SUMMARY
          echo "  version = \"${{ steps.get-tag.outputs.version }}\"" >> $GITHUB_STEP_SUMMARY
          echo "}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # NOTIFY ON RELEASE FAILURE
  # ============================================================================
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: release
    if: failure()

    steps:
      - name: Create failure summary
        run: |
          echo "## ❌ Release Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The semantic release process failed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Common Causes" >> $GITHUB_STEP_SUMMARY
          echo "- No releasable commits since last release" >> $GITHUB_STEP_SUMMARY
          echo "- Invalid conventional commit format" >> $GITHUB_STEP_SUMMARY
          echo "- Missing GITHUB_TOKEN permissions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Conventional Commit Format" >> $GITHUB_STEP_SUMMARY
          echo "- \`feat:\` - New feature (minor version bump)" >> $GITHUB_STEP_SUMMARY
          echo "- \`fix:\` - Bug fix (patch version bump)" >> $GITHUB_STEP_SUMMARY
          echo "- \`BREAKING CHANGE:\` - Breaking change (major version bump)" >> $GITHUB_STEP_SUMMARY
          echo "- \`docs:\` - Documentation only (no version bump)" >> $GITHUB_STEP_SUMMARY
          echo "- \`chore:\` - Maintenance (no version bump)" >> $GITHUB_STEP_SUMMARY
